extends c

snippet st "std::size_t" w
std::size_t 
endsnippet

snippet fora "for(auto i = 0u; i < size; ++i)"
for (auto ${1:i} = ${2:0u}; $1 < ${3:size}; ++$1)
{
	${0:${VISUAL}}
}
endsnippet

snippet forca "for(const auto value: container)"
for (const auto ${1:value} : ${2:container})
{
	${0:${VISUAL}}
}
endsnippet

snippet forcar "for(const auto &element: container)"
for (const auto &${1:element} : ${2:container})
{
	${0:${VISUAL}}
}
endsnippet

snippet forar "for(auto &element: container)"
for (auto &${1:element} : ${2:container})
{
	${0:${VISUAL}}
}
endsnippet

snippet "MS?S?" "MSS_BEGIN() MSS_END()" r
MSS_BEGIN(${1:bool});
${0:${VISUAL}}
MSS_END();
endsnippet

snippet ca "const auto " w
const auto 
endsnippet

snippet un "using namespace " w
using namespace
endsnippet

snippet ud "using log2::stream::Dataset;" w
using log2::stream::Dataset;
endsnippet

# log2 related snippets
snippet lds "log define scope"
namespace {
    log2::Scope scope(const std::string &name, const log2::Callback &cb = {})
    {
        return log::scope("${1:basename}" + name, { "${2:namespace}" }, cb);
    }
}
endsnippet

snippet lf "auto log_f = scope.open();"
auto log_f = scope("${1:name}"${2:, [&](auto &a){ $3 }});
endsnippet

snippet lfa "log_f.open(name, [&](auto &a){  });"
${1:auto log_f${2:1} = }log_f.open("${3:name}"${4:, [&](auto &a){ $5 }});
endsnippet
